from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from config import dp, bot, supabase, channel_username
from buttons import admin_menu_reply_keyboard, winner_menu_keyboard
from state import *
from chat_history_cleaner import chat_history_cleaner
import json
from aiogram.types import ReplyKeyboardRemove
from generate_random import generate_random_numbers

@dp.message_handler(commands=['admin'], state='*')
async def admin_command(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤
    with open('roles.json') as f:
        admin_roles = json.load(f)['admins']

    if str(message.from_user.id) in admin_roles:
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∫–∏
        await Admin.menu.set()
        message_id = await bot.send_message(chat_id,"–í—ã –≤–æ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_menu_reply_keyboard)
        message_id = message_id['message_id']
        await chat_history_cleaner(chat_id, message_id, state)
    else:
        message_id = await bot.send_message(chat_id,"–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        message_id = message_id['message_id']
        await chat_history_cleaner(chat_id, message_id, state)

@dp.message_handler(commands=['give_root'], state=Admin.menu)
async def give_root(message: types.Message):
    if len(message.text.split()) == 2:
        admin_name = message.text.split()[1]
        try:
            admin_name = supabase.from_("UserData").select("chat_id").eq("tg_user_name", admin_name).execute()
            admin_name = admin_name.data[0]['chat_id']
            with open('roles.json', 'r+') as f:
                data = json.load(f)
                if "–Ω–æ–≤–æ–µ_—á–∏—Å–ª–æ" not in data['admins']:
                    data['admins'].append(str(admin_name))
                    f.seek(0)
                    json.dump(data, f, indent=4)
                    f.truncate()
                    await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
                else:
                    await message.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        except Exception as e:
            await message.reply("–ß–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ\n–ö–æ–¥ –æ—à–∏–±–∫–∏: " + str(e))


@dp.message_handler(commands=['delete_root'], state=Admin.menu)
async def delete_root(message: types.Message):
    if len(message.text.split()) == 2:
        admin_name = message.text.split()[1]
        try:
            admin_name = supabase.from_("UserData").select("chat_id").eq("tg_user_name", admin_name).execute()
            admin_name = str(admin_name.data[0]['chat_id'])
            with open('roles.json', 'r+') as f:
                data = json.load(f)
                if admin_name in data['admins']:
                    data['admins'].remove(admin_name)
                    f.seek(0)
                    json.dump(data, f, indent=4)
                    f.truncate()
                    await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –ù–ï –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
                else:
                    await message.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        except Exception as e:
            await message.reply("–ß–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ\n–ö–æ–¥ –æ—à–∏–±–∫–∏: " + str(e))

@dp.message_handler(text="üí°–û–±—ä—è–≤–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è", state=Admin.menu)
async def winner_search(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    user_data = supabase.table("UserData").select("*").filter("status", "eq", True).execute()
    count_true_user = len(user_data.data)
    for user_count in range(count_true_user):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ
        chat_member = await bot.get_chat_member(channel_username, user_data.data[user_count]['chat_id'])
        if chat_member.status in ['member', 'administrator', 'creator']:
            pass
        else:
            count_true_user-=1
            supabase.table('UserData').update({"status": False}).eq('chat_id', user_data.data[user_count]['chat_id']).execute()
    await Admin.wait_winner_count.set()
    message_id = await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π \n–û—Ç 1 –¥–æ " + str(count_true_user),reply_markup=winner_menu_keyboard)
    message_id = message_id['message_id']
    await chat_history_cleaner(chat_id, message_id, state)

@dp.message_handler(state=Admin.wait_winner_count)
async def wait_count_winners(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    user_data = supabase.table("UserData").select("*").filter("status", "eq", True).execute()
    count_true_user = len(user_data.data)
    try:
        count = int(message.text)
        winners_list = generate_random_numbers(0, count_true_user-1, count)
        winners = ""
        print(winners_list)
        for winners_number in winners_list:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ
            chat_member = await bot.get_chat_member(channel_username, user_data.data[winners_number]['chat_id'])
            if chat_member.status in ['member', 'administrator', 'creator']:
                winners += f'\n{user_data.data[winners_number]["tg_user_name"]} - {user_data.data[winners_number]["name"]}'
                print(winners)
            else:
                print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + str(user_data.data[winners_number]['tg_user_name'])+ ' –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –≥—Ä—É–ø–ø—ã, –Ω–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –∑–∞–º–µ–Ω—ã')
        await Admin.menu.set()
        message_id = await bot.send_message(chat_id, winners, reply_markup=admin_menu_reply_keyboard)
        message_id = message_id['message_id']
        await chat_history_cleaner(chat_id, message_id, state)
    except Exception as e:
        await Admin.wait_winner_count.set()
        message_id = await bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¶–ï–õ–û–ï —á–∏—Å–ª–æ, –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ {str(count_true_user)}\n–ö–æ–¥ –æ—à–∏–±–∫–∏ {str(e)}",reply_markup=winner_menu_keyboard)
        message_id = message_id['message_id']
        await chat_history_cleaner(chat_id, message_id, state)

@dp.callback_query_handler(lambda c: c.data == 'back', state=Admin.wait_winner_count)
async def back_admin_menu_Inline(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = callback_query.message.chat.id
    await Admin.menu.set()
    message_id = await bot.send_message(chat_id, "–í—ã –≤–æ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",reply_markup=admin_menu_reply_keyboard)
    message_id = message_id['message_id']
    await chat_history_cleaner(chat_id, message_id, state)


@dp.message_handler(text="üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", state=Admin.menu)
async def statistik(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    data = supabase.table("UserData").select("chat_id").execute()
    all_users = len(data.data)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ –≥—Ä—É–ø–ø—É
    data = supabase.table("UserData").select("*").filter("status", "eq", True).execute()
    user_status_true = len(data.data)
    print(data.data)
    text = "üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ \n –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + str(all_users) + "\n –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ –≥—Ä—É–ø–ø—É: " + str(user_status_true)
    await bot.send_message(chat_id, text, reply_markup=admin_menu_reply_keyboard)


@dp.message_handler(text="‚¨ÖÔ∏è–í—ã—Ö–æ–¥", state=Admin.menu)
async def back_from_admin_panel(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    message_id = await bot.send_message(chat_id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=ReplyKeyboardRemove())
    message_id = message_id['message_id']
    await chat_history_cleaner(chat_id, message_id, state)
    await User.agree.set()