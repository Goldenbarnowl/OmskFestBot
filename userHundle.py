from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from config import dp, bot, supabase, channel_username
from buttons import subscription_ageree_inline_keyboard
from state import *
from chat_history_cleaner import chat_history_cleaner
import re
from aiogram.utils.markdown import hlink

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start

@dp.message_handler(state=User.wait_name)
async def awaitname(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    name = message.text
    data = await state.get_data()
    status = data.get('status')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º–∞—Ç—É –§–ò–û
    if re.match( r'^[–ê-–Ø–Å–∞-—è—ë]+\s+[–ê-–Ø–Å–∞-—è—ë]*$', name):
        telegram_name = message.from_user.username
        if telegram_name is None:
            username = "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏–º–µ–Ω–∏"
        else:
            username = "@" + telegram_name
        supabase.table("UserData").insert({"chat_id": chat_id, "tg_user_name": username, "status": status, "name":name}).execute()
        await User.agree.set()
        await start_command(message,state)
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤)")


@dp.message_handler(content_types=types.ContentType.ANY, state="*")
async def start_command(message: types.Message, state: FSMContext):
   chat_id = message.chat.id

   # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ —Å —Ç–∞–∫–∏–º chat_id
   query_result = supabase.from_("UserData").select("*").eq("chat_id", chat_id).execute()
   print(query_result.data)

   # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ
   chat_member = await bot.get_chat_member(channel_username, chat_id)

   if chat_member.status in ['member', 'administrator', 'creator']:
       status = True
   else:
       status = False

   if query_result.data:
      if query_result.data[0]['status'] != status:
          supabase.table('UserData').update({"status": status}).eq('chat_id', chat_id).execute()

      if status:
          message_id = await bot.send_message(chat_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!ü•≥")
          message_id = message_id['message_id']
          await chat_history_cleaner(chat_id, message_id, state)
      else:
          await User.agree_wait.set()
          link = hlink("C—Å—ã–ª–∫–∞ *–¢–´–ö*", "https://t.me/om_fest")
          message_id = await bot.send_message(chat_id,f"–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª. \n{link}", parse_mode = 'HTML', reply_markup=subscription_ageree_inline_keyboard )
          message_id = message_id['message_id']
          await chat_history_cleaner(chat_id, message_id, state)
   else:
       await User.wait_name.set()
       await state.update_data(status=status)
       message_id = await bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! \n–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ —É–∫–∞–∂–∏—Ç–µ –í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é: ")
       message_id = message_id['message_id']
       await chat_history_cleaner(chat_id, message_id, state)


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É
@dp.callback_query_handler(lambda c: c.data == 'agree', state=User.agree_wait)
async def process_agree_callback(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = callback_query.message.chat.id
    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ
    chat_member = await bot.get_chat_member(channel_username, user_id)

    if chat_member.status in ['member', 'administrator', 'creator']:
        try:
            await bot.edit_message_text(chat_id=callback_query.message.chat.id,message_id=callback_query.message.message_id,text="–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é, –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!ü•≥")
        except:
            pass
        finally:
            supabase.table('UserData').update({"status": True}).eq('chat_id', chat_id).execute()
        await User.agree.set()
    else:
        try:
            link = hlink("C—Å—ã–ª–∫–∞ *–¢–´–ö*", "https://t.me/om_fest")
            await bot.edit_message_text(chat_id=callback_query.message.chat.id,message_id=callback_query.message.message_id,text=f"–ß—Ç–æ–±—ã —É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ, –Ω–∞–¥–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª! \n{link}",parse_mode = 'HTML', reply_markup=subscription_ageree_inline_keyboard)
        except:
            pass